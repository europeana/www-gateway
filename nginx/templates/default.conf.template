server {
  listen       ${PORT};
  server_name  localhost;

  resolver ${RESOLVER};

  # EDM schema content negotiation
  location ~ ^/schemas/edm/(\w+)?$ {
    if ($http_accept ~* "application/rdf\+xml|rdf/xml") {
      return 303 /schemas/edm/rdf/edm.owl;
    }
    if ($http_accept ~* "application/ld\+json|application/json") {
      return 303 /schemas/edm/rdf/edm.jsonld;
    }
    if ($http_accept ~* "text/turtle|application/turtle|application/x-turtle") {
      return 303 /schemas/edm/rdf/edm.ttl;
    }
    if ($http_accept ~* "text/n3|text/rdf\+n3|application/n3") {
      return 303 /schemas/edm/rdf/edm.n3;
    }
    if ($http_accept ~* "application/n-triples|application/ntriples|text/nt") {
      return 303 /schemas/edm/rdf/edm.nt;
    }
    return 303 https://pro.europeana.eu/edm-documentation;
  }

  # Record API v1 item redirection
  location ~ ^/api/v1/record/(\w+)/(\w+).html$ {
    return 301 /item/$1/$2;
  }

  # Older record notation redirection
  location ~ ^/resolve/record/(\w+)/(\w+)$ {
    return 301 /item/$1/$2;
  }

  # Enforce https:// on Record API v2 requests
  location ~ ^/api/v2(.*)$ {
    if ($http_x_forwarded_proto = "http") {
      return 301 https://$host$request_uri;
    }
  }

  # Annotation API
  location ~ ^/api/annotations/(.*) {
    proxy_pass ${ANNOTATION_API_URL}/annotation/$1$is_args$args;
    proxy_set_header Host ${ANNOTATION_API_HOST};
  }

  # Entity API
  location ~ ^/api/entities/(.*) {
    proxy_pass ${ENTITY_API_URL}/entity/$1$is_args$args;
    proxy_set_header Host ${ENTITY_API_HOST};
  }

  # Fulltext API
  location ~ ^/api/fulltext/(.*) {
    proxy_pass ${FULLTEXT_API_URL}/presentation/$1$is_args$args;
    proxy_set_header Host ${FULLTEXT_API_HOST};
  }

  # Sitemap API
  location ~ ^(/sitemap-(record|entity).+) {
    proxy_pass ${SITEMAP_API_URL}/$2$1$is_args$args;
    proxy_set_header Host ${SITEMAP_API_HOST};
  }
  # Legacy URLs, kept until all search engines use newer (see previous location)
  location ~ ^/portal(/europeana-sitemap(-index)?-hashed\.xml)$ {
    proxy_pass ${SITEMAP_API_URL}/sitemap/$1$is_args$args;
    proxy_set_header Host ${SITEMAP_API_HOST};
  }

  # Thumbnail API, v2 only
  location = /api/v2/thumbnail-by-url.json {
    proxy_pass ${THUMBNAIL_API_URL}/api/v2/thumbnail-by-url.json;
    proxy_set_header Host ${THUMBNAIL_API_HOST};
  }

  # Record API
  location ~ ^/api {
    proxy_pass ${RECORD_API_URL};
    proxy_set_header Host ${RECORD_API_HOST};
  }

  # Serve static files
  location / {
    root /usr/share/nginx/html;
    try_files $uri $uri @portal;
  }

  # Reverse proxy everything else to the Portal
  location @portal {
    # Forces use of resolver. Essential for regularly changing DNS records, such
    # as those for container-to-container networking.
    # See: https://www.nginx.com/blog/dns-service-discovery-nginx-plus/
    set $url ${PORTAL_URL};
    proxy_pass $url;
    proxy_set_header Host ${PORTAL_HOST};
    # TODO: handle case where X-Forwarded-Proto is not present, using $scheme instead
    proxy_redirect / $http_x_forwarded_proto://$host/;
  }

  # TODO:
  # * CORS
  # * deploy/ dir for CF w/ Jenkins Pipeline
  # * Disallow robots if env var DISALLOW_ROBOTS is set to 1
  # * Old locations for some pages we need to be backwards compatible with
  # * Obsolete and invalid pages
  # * Other static files
}
